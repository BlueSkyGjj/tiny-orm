// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinyplayer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tinyplayer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tiny {
class FriendProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FriendProto> {
} _FriendProto_default_instance_;
class CountryProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CountryProto> {
} _CountryProto_default_instance_;
class PlayerProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerProto> {
} _PlayerProto_default_instance_;

namespace protobuf_tinyplayer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendProto, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryProto, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, friends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_int8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_int16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_uint8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_uint16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_bytes_tiny_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_bytes_medium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerProto, m_bytes_long_),
  8,
  0,
  1,
  2,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  15,
  17,
  18,
  19,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(FriendProto)},
  { 8, 14, sizeof(CountryProto)},
  { 16, 40, sizeof(PlayerProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CountryProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tinyplayer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _FriendProto_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CountryProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PlayerProto_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FriendProto_default_instance_.DefaultConstruct();
  _CountryProto_default_instance_.DefaultConstruct();
  _PlayerProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020tinyplayer.proto\022\004tiny\"\'\n\013FriendProto\022"
      "\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"(\n\014CountryProt"
      "o\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\"\355\002\n\013PlayerPr"
      "oto\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\017\n\007country"
      "\030\003 \001(\014\022\017\n\007friends\030\004 \001(\014\022\016\n\006m_int8\030\n \001(\021\022"
      "\017\n\007m_int16\030\013 \001(\021\022\017\n\007m_int32\030\014 \001(\021\022\017\n\007m_i"
      "nt64\030\r \001(\022\022\017\n\007m_uint8\030\016 \001(\r\022\020\n\010m_uint16\030"
      "\017 \001(\r\022\020\n\010m_uint32\030\020 \001(\r\022\020\n\010m_uint64\030\021 \001("
      "\004\022\017\n\007m_float\030\022 \001(\002\022\020\n\010m_double\030\023 \001(\001\022\016\n\006"
      "m_bool\030\024 \001(\010\022\020\n\010m_string\030\025 \001(\014\022\017\n\007m_byte"
      "s\030\026 \001(\014\022\024\n\014m_bytes_tiny\030\027 \001(\014\022\026\n\016m_bytes"
      "_medium\030\030 \001(\014\022\024\n\014m_bytes_long\030\031 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tinyplayer.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tinyplayer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendProto::kIdFieldNumber;
const int FriendProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendProto::FriendProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tinyplayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tiny.FriendProto)
}
FriendProto::FriendProto(const FriendProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tiny.FriendProto)
}

void FriendProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

FriendProto::~FriendProto() {
  // @@protoc_insertion_point(destructor:tiny.FriendProto)
  SharedDtor();
}

void FriendProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendProto::descriptor() {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[0].descriptor;
}

const FriendProto& FriendProto::default_instance() {
  protobuf_tinyplayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendProto* FriendProto::New(::google::protobuf::Arena* arena) const {
  FriendProto* n = new FriendProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny.FriendProto)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FriendProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tiny.FriendProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tiny.FriendProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tiny.FriendProto)
  return false;
#undef DO_
}

void FriendProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tiny.FriendProto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tiny.FriendProto)
}

::google::protobuf::uint8* FriendProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tiny.FriendProto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny.FriendProto)
  return target;
}

size_t FriendProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny.FriendProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tiny.FriendProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tiny.FriendProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tiny.FriendProto)
    MergeFrom(*source);
  }
}

void FriendProto::MergeFrom(const FriendProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny.FriendProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void FriendProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tiny.FriendProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendProto::CopyFrom(const FriendProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny.FriendProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendProto::IsInitialized() const {
  return true;
}

void FriendProto::Swap(FriendProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendProto::InternalSwap(FriendProto* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendProto::GetMetadata() const {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendProto

// optional uint32 id = 1;
bool FriendProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FriendProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FriendProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FriendProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 FriendProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.FriendProto.id)
  return id_;
}
void FriendProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.FriendProto.id)
}

// optional bytes name = 2;
bool FriendProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FriendProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FriendProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FriendProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& FriendProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.FriendProto.name)
  return name_.GetNoArena();
}
void FriendProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.FriendProto.name)
}
#if LANG_CXX11
void FriendProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.FriendProto.name)
}
#endif
void FriendProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.FriendProto.name)
}
void FriendProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.FriendProto.name)
}
::std::string* FriendProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.FriendProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.FriendProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.FriendProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountryProto::kIdFieldNumber;
const int CountryProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountryProto::CountryProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tinyplayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tiny.CountryProto)
}
CountryProto::CountryProto(const CountryProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tiny.CountryProto)
}

void CountryProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CountryProto::~CountryProto() {
  // @@protoc_insertion_point(destructor:tiny.CountryProto)
  SharedDtor();
}

void CountryProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CountryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryProto::descriptor() {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[1].descriptor;
}

const CountryProto& CountryProto::default_instance() {
  protobuf_tinyplayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

CountryProto* CountryProto::New(::google::protobuf::Arena* arena) const {
  CountryProto* n = new CountryProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CountryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny.CountryProto)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CountryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tiny.CountryProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tiny.CountryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tiny.CountryProto)
  return false;
#undef DO_
}

void CountryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tiny.CountryProto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tiny.CountryProto)
}

::google::protobuf::uint8* CountryProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tiny.CountryProto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny.CountryProto)
  return target;
}

size_t CountryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny.CountryProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tiny.CountryProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CountryProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CountryProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tiny.CountryProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tiny.CountryProto)
    MergeFrom(*source);
  }
}

void CountryProto::MergeFrom(const CountryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny.CountryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void CountryProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tiny.CountryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryProto::CopyFrom(const CountryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny.CountryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryProto::IsInitialized() const {
  return true;
}

void CountryProto::Swap(CountryProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountryProto::InternalSwap(CountryProto* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CountryProto::GetMetadata() const {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CountryProto

// optional uint32 id = 1;
bool CountryProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CountryProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CountryProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CountryProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CountryProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.CountryProto.id)
  return id_;
}
void CountryProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.CountryProto.id)
}

// optional bytes name = 2;
bool CountryProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CountryProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CountryProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CountryProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CountryProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.CountryProto.name)
  return name_.GetNoArena();
}
void CountryProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.CountryProto.name)
}
#if LANG_CXX11
void CountryProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.CountryProto.name)
}
#endif
void CountryProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.CountryProto.name)
}
void CountryProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.CountryProto.name)
}
::std::string* CountryProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.CountryProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CountryProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.CountryProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CountryProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.CountryProto.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerProto::kIdFieldNumber;
const int PlayerProto::kNameFieldNumber;
const int PlayerProto::kCountryFieldNumber;
const int PlayerProto::kFriendsFieldNumber;
const int PlayerProto::kMInt8FieldNumber;
const int PlayerProto::kMInt16FieldNumber;
const int PlayerProto::kMInt32FieldNumber;
const int PlayerProto::kMInt64FieldNumber;
const int PlayerProto::kMUint8FieldNumber;
const int PlayerProto::kMUint16FieldNumber;
const int PlayerProto::kMUint32FieldNumber;
const int PlayerProto::kMUint64FieldNumber;
const int PlayerProto::kMFloatFieldNumber;
const int PlayerProto::kMDoubleFieldNumber;
const int PlayerProto::kMBoolFieldNumber;
const int PlayerProto::kMStringFieldNumber;
const int PlayerProto::kMBytesFieldNumber;
const int PlayerProto::kMBytesTinyFieldNumber;
const int PlayerProto::kMBytesMediumFieldNumber;
const int PlayerProto::kMBytesLongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerProto::PlayerProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tinyplayer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tiny.PlayerProto)
}
PlayerProto::PlayerProto(const PlayerProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  friends_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friends()) {
    friends_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_);
  }
  m_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_string()) {
    m_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_string_);
  }
  m_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_bytes()) {
    m_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_);
  }
  m_bytes_tiny_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_bytes_tiny()) {
    m_bytes_tiny_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_tiny_);
  }
  m_bytes_medium_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_bytes_medium()) {
    m_bytes_medium_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_medium_);
  }
  m_bytes_long_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_m_bytes_long()) {
    m_bytes_long_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_long_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&m_bool_) -
    reinterpret_cast<char*>(&id_) + sizeof(m_bool_));
  // @@protoc_insertion_point(copy_constructor:tiny.PlayerProto)
}

void PlayerProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friends_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_tiny_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_medium_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_long_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&m_bool_) -
    reinterpret_cast<char*>(&id_) + sizeof(m_bool_));
}

PlayerProto::~PlayerProto() {
  // @@protoc_insertion_point(destructor:tiny.PlayerProto)
  SharedDtor();
}

void PlayerProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friends_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_tiny_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_medium_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_bytes_long_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerProto::descriptor() {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[2].descriptor;
}

const PlayerProto& PlayerProto::default_instance() {
  protobuf_tinyplayer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerProto* PlayerProto::New(::google::protobuf::Arena* arena) const {
  PlayerProto* n = new PlayerProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tiny.PlayerProto)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_friends()) {
      GOOGLE_DCHECK(!friends_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*friends_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_string()) {
      GOOGLE_DCHECK(!m_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_bytes()) {
      GOOGLE_DCHECK(!m_bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_bytes_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_bytes_tiny()) {
      GOOGLE_DCHECK(!m_bytes_tiny_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_bytes_tiny_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_bytes_medium()) {
      GOOGLE_DCHECK(!m_bytes_medium_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_bytes_medium_.UnsafeRawStringPointer())->clear();
    }
    if (has_m_bytes_long()) {
      GOOGLE_DCHECK(!m_bytes_long_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*m_bytes_long_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&m_uint64_) -
      reinterpret_cast<char*>(&id_) + sizeof(m_uint64_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&m_uint32_, 0, reinterpret_cast<char*>(&m_bool_) -
      reinterpret_cast<char*>(&m_uint32_) + sizeof(m_bool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tiny.PlayerProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes country = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes friends = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 m_int8 = 10;
      case 10: {
        if (tag == 80u) {
          set_has_m_int8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_int8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 m_int16 = 11;
      case 11: {
        if (tag == 88u) {
          set_has_m_int16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_int16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 m_int32 = 12;
      case 12: {
        if (tag == 96u) {
          set_has_m_int32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &m_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 m_int64 = 13;
      case 13: {
        if (tag == 104u) {
          set_has_m_int64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &m_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 m_uint8 = 14;
      case 14: {
        if (tag == 112u) {
          set_has_m_uint8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uint8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 m_uint16 = 15;
      case 15: {
        if (tag == 120u) {
          set_has_m_uint16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uint16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 m_uint32 = 16;
      case 16: {
        if (tag == 128u) {
          set_has_m_uint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 m_uint64 = 17;
      case 17: {
        if (tag == 136u) {
          set_has_m_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float m_float = 18;
      case 18: {
        if (tag == 149u) {
          set_has_m_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double m_double = 19;
      case 19: {
        if (tag == 153u) {
          set_has_m_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool m_bool = 20;
      case 20: {
        if (tag == 160u) {
          set_has_m_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_string = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_bytes = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_bytes_tiny = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_bytes_tiny()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_bytes_medium = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_bytes_medium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes m_bytes_long = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m_bytes_long()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tiny.PlayerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tiny.PlayerProto)
  return false;
#undef DO_
}

void PlayerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tiny.PlayerProto)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional bytes country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->country(), output);
  }

  // optional bytes friends = 4;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->friends(), output);
  }

  // optional sint32 m_int8 = 10;
  if (has_m_int8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->m_int8(), output);
  }

  // optional sint32 m_int16 = 11;
  if (has_m_int16()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->m_int16(), output);
  }

  // optional sint32 m_int32 = 12;
  if (has_m_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->m_int32(), output);
  }

  // optional sint64 m_int64 = 13;
  if (has_m_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(13, this->m_int64(), output);
  }

  // optional uint32 m_uint8 = 14;
  if (has_m_uint8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->m_uint8(), output);
  }

  // optional uint32 m_uint16 = 15;
  if (has_m_uint16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->m_uint16(), output);
  }

  // optional uint32 m_uint32 = 16;
  if (has_m_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->m_uint32(), output);
  }

  // optional uint64 m_uint64 = 17;
  if (has_m_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->m_uint64(), output);
  }

  // optional float m_float = 18;
  if (has_m_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->m_float(), output);
  }

  // optional double m_double = 19;
  if (has_m_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->m_double(), output);
  }

  // optional bool m_bool = 20;
  if (has_m_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->m_bool(), output);
  }

  // optional bytes m_string = 21;
  if (has_m_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->m_string(), output);
  }

  // optional bytes m_bytes = 22;
  if (has_m_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->m_bytes(), output);
  }

  // optional bytes m_bytes_tiny = 23;
  if (has_m_bytes_tiny()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->m_bytes_tiny(), output);
  }

  // optional bytes m_bytes_medium = 24;
  if (has_m_bytes_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      24, this->m_bytes_medium(), output);
  }

  // optional bytes m_bytes_long = 25;
  if (has_m_bytes_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->m_bytes_long(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tiny.PlayerProto)
}

::google::protobuf::uint8* PlayerProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tiny.PlayerProto)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional bytes country = 3;
  if (has_country()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->country(), target);
  }

  // optional bytes friends = 4;
  if (has_friends()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->friends(), target);
  }

  // optional sint32 m_int8 = 10;
  if (has_m_int8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->m_int8(), target);
  }

  // optional sint32 m_int16 = 11;
  if (has_m_int16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->m_int16(), target);
  }

  // optional sint32 m_int32 = 12;
  if (has_m_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->m_int32(), target);
  }

  // optional sint64 m_int64 = 13;
  if (has_m_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(13, this->m_int64(), target);
  }

  // optional uint32 m_uint8 = 14;
  if (has_m_uint8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->m_uint8(), target);
  }

  // optional uint32 m_uint16 = 15;
  if (has_m_uint16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->m_uint16(), target);
  }

  // optional uint32 m_uint32 = 16;
  if (has_m_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->m_uint32(), target);
  }

  // optional uint64 m_uint64 = 17;
  if (has_m_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->m_uint64(), target);
  }

  // optional float m_float = 18;
  if (has_m_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->m_float(), target);
  }

  // optional double m_double = 19;
  if (has_m_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->m_double(), target);
  }

  // optional bool m_bool = 20;
  if (has_m_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->m_bool(), target);
  }

  // optional bytes m_string = 21;
  if (has_m_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->m_string(), target);
  }

  // optional bytes m_bytes = 22;
  if (has_m_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->m_bytes(), target);
  }

  // optional bytes m_bytes_tiny = 23;
  if (has_m_bytes_tiny()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->m_bytes_tiny(), target);
  }

  // optional bytes m_bytes_medium = 24;
  if (has_m_bytes_medium()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->m_bytes_medium(), target);
  }

  // optional bytes m_bytes_long = 25;
  if (has_m_bytes_long()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->m_bytes_long(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tiny.PlayerProto)
  return target;
}

size_t PlayerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tiny.PlayerProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->country());
    }

    // optional bytes friends = 4;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->friends());
    }

    // optional bytes m_string = 21;
    if (has_m_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_string());
    }

    // optional bytes m_bytes = 22;
    if (has_m_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_bytes());
    }

    // optional bytes m_bytes_tiny = 23;
    if (has_m_bytes_tiny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_bytes_tiny());
    }

    // optional bytes m_bytes_medium = 24;
    if (has_m_bytes_medium()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_bytes_medium());
    }

    // optional bytes m_bytes_long = 25;
    if (has_m_bytes_long()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m_bytes_long());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional sint32 m_int8 = 10;
    if (has_m_int8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_int8());
    }

    // optional sint32 m_int16 = 11;
    if (has_m_int16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_int16());
    }

    // optional sint32 m_int32 = 12;
    if (has_m_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->m_int32());
    }

    // optional sint64 m_int64 = 13;
    if (has_m_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->m_int64());
    }

    // optional uint32 m_uint8 = 14;
    if (has_m_uint8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uint8());
    }

    // optional uint32 m_uint16 = 15;
    if (has_m_uint16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uint16());
    }

    // optional uint64 m_uint64 = 17;
    if (has_m_uint64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_uint64());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 m_uint32 = 16;
    if (has_m_uint32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uint32());
    }

    // optional float m_float = 18;
    if (has_m_float()) {
      total_size += 2 + 4;
    }

    // optional double m_double = 19;
    if (has_m_double()) {
      total_size += 2 + 8;
    }

    // optional bool m_bool = 20;
    if (has_m_bool()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tiny.PlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tiny.PlayerProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tiny.PlayerProto)
    MergeFrom(*source);
  }
}

void PlayerProto::MergeFrom(const PlayerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tiny.PlayerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_friends()) {
      set_has_friends();
      friends_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_);
    }
    if (from.has_m_string()) {
      set_has_m_string();
      m_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_string_);
    }
    if (from.has_m_bytes()) {
      set_has_m_bytes();
      m_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_);
    }
    if (from.has_m_bytes_tiny()) {
      set_has_m_bytes_tiny();
      m_bytes_tiny_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_tiny_);
    }
    if (from.has_m_bytes_medium()) {
      set_has_m_bytes_medium();
      m_bytes_medium_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_medium_);
    }
    if (from.has_m_bytes_long()) {
      set_has_m_bytes_long();
      m_bytes_long_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m_bytes_long_);
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_m_int8()) {
      set_m_int8(from.m_int8());
    }
    if (from.has_m_int16()) {
      set_m_int16(from.m_int16());
    }
    if (from.has_m_int32()) {
      set_m_int32(from.m_int32());
    }
    if (from.has_m_int64()) {
      set_m_int64(from.m_int64());
    }
    if (from.has_m_uint8()) {
      set_m_uint8(from.m_uint8());
    }
    if (from.has_m_uint16()) {
      set_m_uint16(from.m_uint16());
    }
    if (from.has_m_uint64()) {
      set_m_uint64(from.m_uint64());
    }
  }
  if (from._has_bits_[16 / 32] & 983040u) {
    if (from.has_m_uint32()) {
      set_m_uint32(from.m_uint32());
    }
    if (from.has_m_float()) {
      set_m_float(from.m_float());
    }
    if (from.has_m_double()) {
      set_m_double(from.m_double());
    }
    if (from.has_m_bool()) {
      set_m_bool(from.m_bool());
    }
  }
}

void PlayerProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tiny.PlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerProto::CopyFrom(const PlayerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tiny.PlayerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerProto::IsInitialized() const {
  return true;
}

void PlayerProto::Swap(PlayerProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerProto::InternalSwap(PlayerProto* other) {
  name_.Swap(&other->name_);
  country_.Swap(&other->country_);
  friends_.Swap(&other->friends_);
  m_string_.Swap(&other->m_string_);
  m_bytes_.Swap(&other->m_bytes_);
  m_bytes_tiny_.Swap(&other->m_bytes_tiny_);
  m_bytes_medium_.Swap(&other->m_bytes_medium_);
  m_bytes_long_.Swap(&other->m_bytes_long_);
  std::swap(id_, other->id_);
  std::swap(m_int8_, other->m_int8_);
  std::swap(m_int16_, other->m_int16_);
  std::swap(m_int32_, other->m_int32_);
  std::swap(m_int64_, other->m_int64_);
  std::swap(m_uint8_, other->m_uint8_);
  std::swap(m_uint16_, other->m_uint16_);
  std::swap(m_uint64_, other->m_uint64_);
  std::swap(m_uint32_, other->m_uint32_);
  std::swap(m_float_, other->m_float_);
  std::swap(m_double_, other->m_double_);
  std::swap(m_bool_, other->m_bool_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerProto::GetMetadata() const {
  protobuf_tinyplayer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tinyplayer_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerProto

// optional uint32 id = 1;
bool PlayerProto::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlayerProto::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void PlayerProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlayerProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 PlayerProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.id)
  return id_;
}
void PlayerProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.id)
}

// optional bytes name = 2;
bool PlayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PlayerProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.name)
  return name_.GetNoArena();
}
void PlayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.name)
}
#if LANG_CXX11
void PlayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.name)
}
#endif
void PlayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.name)
}
void PlayerProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.name)
}
::std::string* PlayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.name)
}

// optional bytes country = 3;
bool PlayerProto::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerProto::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerProto::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerProto::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& PlayerProto::country() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.country)
  return country_.GetNoArena();
}
void PlayerProto::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.country)
}
#if LANG_CXX11
void PlayerProto::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.country)
}
#endif
void PlayerProto::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.country)
}
void PlayerProto::set_country(const void* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.country)
}
::std::string* PlayerProto::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_country() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.country)
}

// optional bytes friends = 4;
bool PlayerProto::has_friends() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerProto::set_has_friends() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerProto::clear_has_friends() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerProto::clear_friends() {
  friends_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friends();
}
const ::std::string& PlayerProto::friends() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.friends)
  return friends_.GetNoArena();
}
void PlayerProto::set_friends(const ::std::string& value) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.friends)
}
#if LANG_CXX11
void PlayerProto::set_friends(::std::string&& value) {
  set_has_friends();
  friends_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.friends)
}
#endif
void PlayerProto::set_friends(const char* value) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.friends)
}
void PlayerProto::set_friends(const void* value, size_t size) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.friends)
}
::std::string* PlayerProto::mutable_friends() {
  set_has_friends();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.friends)
  return friends_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_friends() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.friends)
  clear_has_friends();
  return friends_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_friends(::std::string* friends) {
  if (friends != NULL) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
  friends_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friends);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.friends)
}

// optional sint32 m_int8 = 10;
bool PlayerProto::has_m_int8() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlayerProto::set_has_m_int8() {
  _has_bits_[0] |= 0x00000200u;
}
void PlayerProto::clear_has_m_int8() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlayerProto::clear_m_int8() {
  m_int8_ = 0;
  clear_has_m_int8();
}
::google::protobuf::int32 PlayerProto::m_int8() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int8)
  return m_int8_;
}
void PlayerProto::set_m_int8(::google::protobuf::int32 value) {
  set_has_m_int8();
  m_int8_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int8)
}

// optional sint32 m_int16 = 11;
bool PlayerProto::has_m_int16() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PlayerProto::set_has_m_int16() {
  _has_bits_[0] |= 0x00000400u;
}
void PlayerProto::clear_has_m_int16() {
  _has_bits_[0] &= ~0x00000400u;
}
void PlayerProto::clear_m_int16() {
  m_int16_ = 0;
  clear_has_m_int16();
}
::google::protobuf::int32 PlayerProto::m_int16() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int16)
  return m_int16_;
}
void PlayerProto::set_m_int16(::google::protobuf::int32 value) {
  set_has_m_int16();
  m_int16_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int16)
}

// optional sint32 m_int32 = 12;
bool PlayerProto::has_m_int32() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PlayerProto::set_has_m_int32() {
  _has_bits_[0] |= 0x00000800u;
}
void PlayerProto::clear_has_m_int32() {
  _has_bits_[0] &= ~0x00000800u;
}
void PlayerProto::clear_m_int32() {
  m_int32_ = 0;
  clear_has_m_int32();
}
::google::protobuf::int32 PlayerProto::m_int32() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int32)
  return m_int32_;
}
void PlayerProto::set_m_int32(::google::protobuf::int32 value) {
  set_has_m_int32();
  m_int32_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int32)
}

// optional sint64 m_int64 = 13;
bool PlayerProto::has_m_int64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PlayerProto::set_has_m_int64() {
  _has_bits_[0] |= 0x00001000u;
}
void PlayerProto::clear_has_m_int64() {
  _has_bits_[0] &= ~0x00001000u;
}
void PlayerProto::clear_m_int64() {
  m_int64_ = GOOGLE_LONGLONG(0);
  clear_has_m_int64();
}
::google::protobuf::int64 PlayerProto::m_int64() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int64)
  return m_int64_;
}
void PlayerProto::set_m_int64(::google::protobuf::int64 value) {
  set_has_m_int64();
  m_int64_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int64)
}

// optional uint32 m_uint8 = 14;
bool PlayerProto::has_m_uint8() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PlayerProto::set_has_m_uint8() {
  _has_bits_[0] |= 0x00002000u;
}
void PlayerProto::clear_has_m_uint8() {
  _has_bits_[0] &= ~0x00002000u;
}
void PlayerProto::clear_m_uint8() {
  m_uint8_ = 0u;
  clear_has_m_uint8();
}
::google::protobuf::uint32 PlayerProto::m_uint8() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint8)
  return m_uint8_;
}
void PlayerProto::set_m_uint8(::google::protobuf::uint32 value) {
  set_has_m_uint8();
  m_uint8_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint8)
}

// optional uint32 m_uint16 = 15;
bool PlayerProto::has_m_uint16() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PlayerProto::set_has_m_uint16() {
  _has_bits_[0] |= 0x00004000u;
}
void PlayerProto::clear_has_m_uint16() {
  _has_bits_[0] &= ~0x00004000u;
}
void PlayerProto::clear_m_uint16() {
  m_uint16_ = 0u;
  clear_has_m_uint16();
}
::google::protobuf::uint32 PlayerProto::m_uint16() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint16)
  return m_uint16_;
}
void PlayerProto::set_m_uint16(::google::protobuf::uint32 value) {
  set_has_m_uint16();
  m_uint16_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint16)
}

// optional uint32 m_uint32 = 16;
bool PlayerProto::has_m_uint32() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PlayerProto::set_has_m_uint32() {
  _has_bits_[0] |= 0x00010000u;
}
void PlayerProto::clear_has_m_uint32() {
  _has_bits_[0] &= ~0x00010000u;
}
void PlayerProto::clear_m_uint32() {
  m_uint32_ = 0u;
  clear_has_m_uint32();
}
::google::protobuf::uint32 PlayerProto::m_uint32() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint32)
  return m_uint32_;
}
void PlayerProto::set_m_uint32(::google::protobuf::uint32 value) {
  set_has_m_uint32();
  m_uint32_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint32)
}

// optional uint64 m_uint64 = 17;
bool PlayerProto::has_m_uint64() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PlayerProto::set_has_m_uint64() {
  _has_bits_[0] |= 0x00008000u;
}
void PlayerProto::clear_has_m_uint64() {
  _has_bits_[0] &= ~0x00008000u;
}
void PlayerProto::clear_m_uint64() {
  m_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_m_uint64();
}
::google::protobuf::uint64 PlayerProto::m_uint64() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint64)
  return m_uint64_;
}
void PlayerProto::set_m_uint64(::google::protobuf::uint64 value) {
  set_has_m_uint64();
  m_uint64_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint64)
}

// optional float m_float = 18;
bool PlayerProto::has_m_float() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PlayerProto::set_has_m_float() {
  _has_bits_[0] |= 0x00020000u;
}
void PlayerProto::clear_has_m_float() {
  _has_bits_[0] &= ~0x00020000u;
}
void PlayerProto::clear_m_float() {
  m_float_ = 0;
  clear_has_m_float();
}
float PlayerProto::m_float() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_float)
  return m_float_;
}
void PlayerProto::set_m_float(float value) {
  set_has_m_float();
  m_float_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_float)
}

// optional double m_double = 19;
bool PlayerProto::has_m_double() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PlayerProto::set_has_m_double() {
  _has_bits_[0] |= 0x00040000u;
}
void PlayerProto::clear_has_m_double() {
  _has_bits_[0] &= ~0x00040000u;
}
void PlayerProto::clear_m_double() {
  m_double_ = 0;
  clear_has_m_double();
}
double PlayerProto::m_double() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_double)
  return m_double_;
}
void PlayerProto::set_m_double(double value) {
  set_has_m_double();
  m_double_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_double)
}

// optional bool m_bool = 20;
bool PlayerProto::has_m_bool() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PlayerProto::set_has_m_bool() {
  _has_bits_[0] |= 0x00080000u;
}
void PlayerProto::clear_has_m_bool() {
  _has_bits_[0] &= ~0x00080000u;
}
void PlayerProto::clear_m_bool() {
  m_bool_ = false;
  clear_has_m_bool();
}
bool PlayerProto::m_bool() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bool)
  return m_bool_;
}
void PlayerProto::set_m_bool(bool value) {
  set_has_m_bool();
  m_bool_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bool)
}

// optional bytes m_string = 21;
bool PlayerProto::has_m_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerProto::set_has_m_string() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerProto::clear_has_m_string() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerProto::clear_m_string() {
  m_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_string();
}
const ::std::string& PlayerProto::m_string() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_string)
  return m_string_.GetNoArena();
}
void PlayerProto::set_m_string(const ::std::string& value) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_string)
}
#if LANG_CXX11
void PlayerProto::set_m_string(::std::string&& value) {
  set_has_m_string();
  m_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_string)
}
#endif
void PlayerProto::set_m_string(const char* value) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_string)
}
void PlayerProto::set_m_string(const void* value, size_t size) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_string)
}
::std::string* PlayerProto::mutable_m_string() {
  set_has_m_string();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_string)
  return m_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_m_string() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_string)
  clear_has_m_string();
  return m_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_m_string(::std::string* m_string) {
  if (m_string != NULL) {
    set_has_m_string();
  } else {
    clear_has_m_string();
  }
  m_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_string);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_string)
}

// optional bytes m_bytes = 22;
bool PlayerProto::has_m_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerProto::set_has_m_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerProto::clear_has_m_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerProto::clear_m_bytes() {
  m_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes();
}
const ::std::string& PlayerProto::m_bytes() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes)
  return m_bytes_.GetNoArena();
}
void PlayerProto::set_m_bytes(const ::std::string& value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes)
}
#if LANG_CXX11
void PlayerProto::set_m_bytes(::std::string&& value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes)
}
#endif
void PlayerProto::set_m_bytes(const char* value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes)
}
void PlayerProto::set_m_bytes(const void* value, size_t size) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes)
}
::std::string* PlayerProto::mutable_m_bytes() {
  set_has_m_bytes();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes)
  return m_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_m_bytes() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes)
  clear_has_m_bytes();
  return m_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_m_bytes(::std::string* m_bytes) {
  if (m_bytes != NULL) {
    set_has_m_bytes();
  } else {
    clear_has_m_bytes();
  }
  m_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes)
}

// optional bytes m_bytes_tiny = 23;
bool PlayerProto::has_m_bytes_tiny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerProto::set_has_m_bytes_tiny() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerProto::clear_has_m_bytes_tiny() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerProto::clear_m_bytes_tiny() {
  m_bytes_tiny_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_tiny();
}
const ::std::string& PlayerProto::m_bytes_tiny() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_tiny)
  return m_bytes_tiny_.GetNoArena();
}
void PlayerProto::set_m_bytes_tiny(const ::std::string& value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_tiny)
}
#if LANG_CXX11
void PlayerProto::set_m_bytes_tiny(::std::string&& value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_tiny)
}
#endif
void PlayerProto::set_m_bytes_tiny(const char* value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_tiny)
}
void PlayerProto::set_m_bytes_tiny(const void* value, size_t size) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_tiny)
}
::std::string* PlayerProto::mutable_m_bytes_tiny() {
  set_has_m_bytes_tiny();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_tiny)
  return m_bytes_tiny_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_m_bytes_tiny() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_tiny)
  clear_has_m_bytes_tiny();
  return m_bytes_tiny_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_m_bytes_tiny(::std::string* m_bytes_tiny) {
  if (m_bytes_tiny != NULL) {
    set_has_m_bytes_tiny();
  } else {
    clear_has_m_bytes_tiny();
  }
  m_bytes_tiny_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_tiny);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_tiny)
}

// optional bytes m_bytes_medium = 24;
bool PlayerProto::has_m_bytes_medium() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerProto::set_has_m_bytes_medium() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerProto::clear_has_m_bytes_medium() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerProto::clear_m_bytes_medium() {
  m_bytes_medium_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_medium();
}
const ::std::string& PlayerProto::m_bytes_medium() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_medium)
  return m_bytes_medium_.GetNoArena();
}
void PlayerProto::set_m_bytes_medium(const ::std::string& value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_medium)
}
#if LANG_CXX11
void PlayerProto::set_m_bytes_medium(::std::string&& value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_medium)
}
#endif
void PlayerProto::set_m_bytes_medium(const char* value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_medium)
}
void PlayerProto::set_m_bytes_medium(const void* value, size_t size) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_medium)
}
::std::string* PlayerProto::mutable_m_bytes_medium() {
  set_has_m_bytes_medium();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_medium)
  return m_bytes_medium_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_m_bytes_medium() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_medium)
  clear_has_m_bytes_medium();
  return m_bytes_medium_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_m_bytes_medium(::std::string* m_bytes_medium) {
  if (m_bytes_medium != NULL) {
    set_has_m_bytes_medium();
  } else {
    clear_has_m_bytes_medium();
  }
  m_bytes_medium_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_medium);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_medium)
}

// optional bytes m_bytes_long = 25;
bool PlayerProto::has_m_bytes_long() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlayerProto::set_has_m_bytes_long() {
  _has_bits_[0] |= 0x00000080u;
}
void PlayerProto::clear_has_m_bytes_long() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlayerProto::clear_m_bytes_long() {
  m_bytes_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_long();
}
const ::std::string& PlayerProto::m_bytes_long() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_long)
  return m_bytes_long_.GetNoArena();
}
void PlayerProto::set_m_bytes_long(const ::std::string& value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_long)
}
#if LANG_CXX11
void PlayerProto::set_m_bytes_long(::std::string&& value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_long)
}
#endif
void PlayerProto::set_m_bytes_long(const char* value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_long)
}
void PlayerProto::set_m_bytes_long(const void* value, size_t size) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_long)
}
::std::string* PlayerProto::mutable_m_bytes_long() {
  set_has_m_bytes_long();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_long)
  return m_bytes_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerProto::release_m_bytes_long() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_long)
  clear_has_m_bytes_long();
  return m_bytes_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerProto::set_allocated_m_bytes_long(::std::string* m_bytes_long) {
  if (m_bytes_long != NULL) {
    set_has_m_bytes_long();
  } else {
    clear_has_m_bytes_long();
  }
  m_bytes_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_long);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_long)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tiny

// @@protoc_insertion_point(global_scope)
