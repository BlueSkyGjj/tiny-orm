// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinyplayer.proto

#ifndef PROTOBUF_tinyplayer_2eproto__INCLUDED
#define PROTOBUF_tinyplayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tiny {
class CountryProto;
class CountryProtoDefaultTypeInternal;
extern CountryProtoDefaultTypeInternal _CountryProto_default_instance_;
class FriendProto;
class FriendProtoDefaultTypeInternal;
extern FriendProtoDefaultTypeInternal _FriendProto_default_instance_;
class PlayerProto;
class PlayerProtoDefaultTypeInternal;
extern PlayerProtoDefaultTypeInternal _PlayerProto_default_instance_;
}  // namespace tiny

namespace tiny {

namespace protobuf_tinyplayer_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tinyplayer_2eproto

// ===================================================================

class FriendProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tiny.FriendProto) */ {
 public:
  FriendProto();
  virtual ~FriendProto();

  FriendProto(const FriendProto& from);

  inline FriendProto& operator=(const FriendProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendProto& default_instance();

  static inline const FriendProto* internal_default_instance() {
    return reinterpret_cast<const FriendProto*>(
               &_FriendProto_default_instance_);
  }

  void Swap(FriendProto* other);

  // implements Message ----------------------------------------------

  inline FriendProto* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendProto& from);
  void MergeFrom(const FriendProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tiny.FriendProto)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  friend struct  protobuf_tinyplayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CountryProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tiny.CountryProto) */ {
 public:
  CountryProto();
  virtual ~CountryProto();

  CountryProto(const CountryProto& from);

  inline CountryProto& operator=(const CountryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryProto& default_instance();

  static inline const CountryProto* internal_default_instance() {
    return reinterpret_cast<const CountryProto*>(
               &_CountryProto_default_instance_);
  }

  void Swap(CountryProto* other);

  // implements Message ----------------------------------------------

  inline CountryProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CountryProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CountryProto& from);
  void MergeFrom(const CountryProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CountryProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tiny.CountryProto)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  friend struct  protobuf_tinyplayer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tiny.PlayerProto) */ {
 public:
  PlayerProto();
  virtual ~PlayerProto();

  PlayerProto(const PlayerProto& from);

  inline PlayerProto& operator=(const PlayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerProto& default_instance();

  static inline const PlayerProto* internal_default_instance() {
    return reinterpret_cast<const PlayerProto*>(
               &_PlayerProto_default_instance_);
  }

  void Swap(PlayerProto* other);

  // implements Message ----------------------------------------------

  inline PlayerProto* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerProto& from);
  void MergeFrom(const PlayerProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes country = 3;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 3;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const void* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional bytes friends = 4;
  bool has_friends() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 4;
  const ::std::string& friends() const;
  void set_friends(const ::std::string& value);
  #if LANG_CXX11
  void set_friends(::std::string&& value);
  #endif
  void set_friends(const char* value);
  void set_friends(const void* value, size_t size);
  ::std::string* mutable_friends();
  ::std::string* release_friends();
  void set_allocated_friends(::std::string* friends);

  // optional bytes m_string = 21;
  bool has_m_string() const;
  void clear_m_string();
  static const int kMStringFieldNumber = 21;
  const ::std::string& m_string() const;
  void set_m_string(const ::std::string& value);
  #if LANG_CXX11
  void set_m_string(::std::string&& value);
  #endif
  void set_m_string(const char* value);
  void set_m_string(const void* value, size_t size);
  ::std::string* mutable_m_string();
  ::std::string* release_m_string();
  void set_allocated_m_string(::std::string* m_string);

  // optional bytes m_bytes = 22;
  bool has_m_bytes() const;
  void clear_m_bytes();
  static const int kMBytesFieldNumber = 22;
  const ::std::string& m_bytes() const;
  void set_m_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_m_bytes(::std::string&& value);
  #endif
  void set_m_bytes(const char* value);
  void set_m_bytes(const void* value, size_t size);
  ::std::string* mutable_m_bytes();
  ::std::string* release_m_bytes();
  void set_allocated_m_bytes(::std::string* m_bytes);

  // optional bytes m_bytes_tiny = 23;
  bool has_m_bytes_tiny() const;
  void clear_m_bytes_tiny();
  static const int kMBytesTinyFieldNumber = 23;
  const ::std::string& m_bytes_tiny() const;
  void set_m_bytes_tiny(const ::std::string& value);
  #if LANG_CXX11
  void set_m_bytes_tiny(::std::string&& value);
  #endif
  void set_m_bytes_tiny(const char* value);
  void set_m_bytes_tiny(const void* value, size_t size);
  ::std::string* mutable_m_bytes_tiny();
  ::std::string* release_m_bytes_tiny();
  void set_allocated_m_bytes_tiny(::std::string* m_bytes_tiny);

  // optional bytes m_bytes_medium = 24;
  bool has_m_bytes_medium() const;
  void clear_m_bytes_medium();
  static const int kMBytesMediumFieldNumber = 24;
  const ::std::string& m_bytes_medium() const;
  void set_m_bytes_medium(const ::std::string& value);
  #if LANG_CXX11
  void set_m_bytes_medium(::std::string&& value);
  #endif
  void set_m_bytes_medium(const char* value);
  void set_m_bytes_medium(const void* value, size_t size);
  ::std::string* mutable_m_bytes_medium();
  ::std::string* release_m_bytes_medium();
  void set_allocated_m_bytes_medium(::std::string* m_bytes_medium);

  // optional bytes m_bytes_long = 25;
  bool has_m_bytes_long() const;
  void clear_m_bytes_long();
  static const int kMBytesLongFieldNumber = 25;
  const ::std::string& m_bytes_long() const;
  void set_m_bytes_long(const ::std::string& value);
  #if LANG_CXX11
  void set_m_bytes_long(::std::string&& value);
  #endif
  void set_m_bytes_long(const char* value);
  void set_m_bytes_long(const void* value, size_t size);
  ::std::string* mutable_m_bytes_long();
  ::std::string* release_m_bytes_long();
  void set_allocated_m_bytes_long(::std::string* m_bytes_long);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional sint32 m_int8 = 10;
  bool has_m_int8() const;
  void clear_m_int8();
  static const int kMInt8FieldNumber = 10;
  ::google::protobuf::int32 m_int8() const;
  void set_m_int8(::google::protobuf::int32 value);

  // optional sint32 m_int16 = 11;
  bool has_m_int16() const;
  void clear_m_int16();
  static const int kMInt16FieldNumber = 11;
  ::google::protobuf::int32 m_int16() const;
  void set_m_int16(::google::protobuf::int32 value);

  // optional sint32 m_int32 = 12;
  bool has_m_int32() const;
  void clear_m_int32();
  static const int kMInt32FieldNumber = 12;
  ::google::protobuf::int32 m_int32() const;
  void set_m_int32(::google::protobuf::int32 value);

  // optional sint64 m_int64 = 13;
  bool has_m_int64() const;
  void clear_m_int64();
  static const int kMInt64FieldNumber = 13;
  ::google::protobuf::int64 m_int64() const;
  void set_m_int64(::google::protobuf::int64 value);

  // optional uint32 m_uint8 = 14;
  bool has_m_uint8() const;
  void clear_m_uint8();
  static const int kMUint8FieldNumber = 14;
  ::google::protobuf::uint32 m_uint8() const;
  void set_m_uint8(::google::protobuf::uint32 value);

  // optional uint32 m_uint16 = 15;
  bool has_m_uint16() const;
  void clear_m_uint16();
  static const int kMUint16FieldNumber = 15;
  ::google::protobuf::uint32 m_uint16() const;
  void set_m_uint16(::google::protobuf::uint32 value);

  // optional uint64 m_uint64 = 17;
  bool has_m_uint64() const;
  void clear_m_uint64();
  static const int kMUint64FieldNumber = 17;
  ::google::protobuf::uint64 m_uint64() const;
  void set_m_uint64(::google::protobuf::uint64 value);

  // optional uint32 m_uint32 = 16;
  bool has_m_uint32() const;
  void clear_m_uint32();
  static const int kMUint32FieldNumber = 16;
  ::google::protobuf::uint32 m_uint32() const;
  void set_m_uint32(::google::protobuf::uint32 value);

  // optional float m_float = 18;
  bool has_m_float() const;
  void clear_m_float();
  static const int kMFloatFieldNumber = 18;
  float m_float() const;
  void set_m_float(float value);

  // optional double m_double = 19;
  bool has_m_double() const;
  void clear_m_double();
  static const int kMDoubleFieldNumber = 19;
  double m_double() const;
  void set_m_double(double value);

  // optional bool m_bool = 20;
  bool has_m_bool() const;
  void clear_m_bool();
  static const int kMBoolFieldNumber = 20;
  bool m_bool() const;
  void set_m_bool(bool value);

  // @@protoc_insertion_point(class_scope:tiny.PlayerProto)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_country();
  void clear_has_country();
  void set_has_friends();
  void clear_has_friends();
  void set_has_m_int8();
  void clear_has_m_int8();
  void set_has_m_int16();
  void clear_has_m_int16();
  void set_has_m_int32();
  void clear_has_m_int32();
  void set_has_m_int64();
  void clear_has_m_int64();
  void set_has_m_uint8();
  void clear_has_m_uint8();
  void set_has_m_uint16();
  void clear_has_m_uint16();
  void set_has_m_uint32();
  void clear_has_m_uint32();
  void set_has_m_uint64();
  void clear_has_m_uint64();
  void set_has_m_float();
  void clear_has_m_float();
  void set_has_m_double();
  void clear_has_m_double();
  void set_has_m_bool();
  void clear_has_m_bool();
  void set_has_m_string();
  void clear_has_m_string();
  void set_has_m_bytes();
  void clear_has_m_bytes();
  void set_has_m_bytes_tiny();
  void clear_has_m_bytes_tiny();
  void set_has_m_bytes_medium();
  void clear_has_m_bytes_medium();
  void set_has_m_bytes_long();
  void clear_has_m_bytes_long();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr friends_;
  ::google::protobuf::internal::ArenaStringPtr m_string_;
  ::google::protobuf::internal::ArenaStringPtr m_bytes_;
  ::google::protobuf::internal::ArenaStringPtr m_bytes_tiny_;
  ::google::protobuf::internal::ArenaStringPtr m_bytes_medium_;
  ::google::protobuf::internal::ArenaStringPtr m_bytes_long_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 m_int8_;
  ::google::protobuf::int32 m_int16_;
  ::google::protobuf::int32 m_int32_;
  ::google::protobuf::int64 m_int64_;
  ::google::protobuf::uint32 m_uint8_;
  ::google::protobuf::uint32 m_uint16_;
  ::google::protobuf::uint64 m_uint64_;
  ::google::protobuf::uint32 m_uint32_;
  float m_float_;
  double m_double_;
  bool m_bool_;
  friend struct  protobuf_tinyplayer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendProto

// optional uint32 id = 1;
inline bool FriendProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FriendProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.FriendProto.id)
  return id_;
}
inline void FriendProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.FriendProto.id)
}

// optional bytes name = 2;
inline bool FriendProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FriendProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.FriendProto.name)
  return name_.GetNoArena();
}
inline void FriendProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.FriendProto.name)
}
#if LANG_CXX11
inline void FriendProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.FriendProto.name)
}
#endif
inline void FriendProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.FriendProto.name)
}
inline void FriendProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.FriendProto.name)
}
inline ::std::string* FriendProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.FriendProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.FriendProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.FriendProto.name)
}

// -------------------------------------------------------------------

// CountryProto

// optional uint32 id = 1;
inline bool CountryProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryProto::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CountryProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.CountryProto.id)
  return id_;
}
inline void CountryProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.CountryProto.id)
}

// optional bytes name = 2;
inline bool CountryProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CountryProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.CountryProto.name)
  return name_.GetNoArena();
}
inline void CountryProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.CountryProto.name)
}
#if LANG_CXX11
inline void CountryProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.CountryProto.name)
}
#endif
inline void CountryProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.CountryProto.name)
}
inline void CountryProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.CountryProto.name)
}
inline ::std::string* CountryProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.CountryProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CountryProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.CountryProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CountryProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.CountryProto.name)
}

// -------------------------------------------------------------------

// PlayerProto

// optional uint32 id = 1;
inline bool PlayerProto::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerProto::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PlayerProto::id() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.id)
  return id_;
}
inline void PlayerProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.id)
}

// optional bytes name = 2;
inline bool PlayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlayerProto::name() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.name)
  return name_.GetNoArena();
}
inline void PlayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.name)
}
#if LANG_CXX11
inline void PlayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.name)
}
#endif
inline void PlayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.name)
}
inline void PlayerProto::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.name)
}
inline ::std::string* PlayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_name() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.name)
}

// optional bytes country = 3;
inline bool PlayerProto::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerProto::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerProto::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerProto::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& PlayerProto::country() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.country)
  return country_.GetNoArena();
}
inline void PlayerProto::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.country)
}
#if LANG_CXX11
inline void PlayerProto::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.country)
}
#endif
inline void PlayerProto::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.country)
}
inline void PlayerProto::set_country(const void* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.country)
}
inline ::std::string* PlayerProto::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_country() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.country)
}

// optional bytes friends = 4;
inline bool PlayerProto::has_friends() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerProto::set_has_friends() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerProto::clear_has_friends() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerProto::clear_friends() {
  friends_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friends();
}
inline const ::std::string& PlayerProto::friends() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.friends)
  return friends_.GetNoArena();
}
inline void PlayerProto::set_friends(const ::std::string& value) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.friends)
}
#if LANG_CXX11
inline void PlayerProto::set_friends(::std::string&& value) {
  set_has_friends();
  friends_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.friends)
}
#endif
inline void PlayerProto::set_friends(const char* value) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.friends)
}
inline void PlayerProto::set_friends(const void* value, size_t size) {
  set_has_friends();
  friends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.friends)
}
inline ::std::string* PlayerProto::mutable_friends() {
  set_has_friends();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.friends)
  return friends_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_friends() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.friends)
  clear_has_friends();
  return friends_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_friends(::std::string* friends) {
  if (friends != NULL) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
  friends_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friends);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.friends)
}

// optional sint32 m_int8 = 10;
inline bool PlayerProto::has_m_int8() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerProto::set_has_m_int8() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerProto::clear_has_m_int8() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerProto::clear_m_int8() {
  m_int8_ = 0;
  clear_has_m_int8();
}
inline ::google::protobuf::int32 PlayerProto::m_int8() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int8)
  return m_int8_;
}
inline void PlayerProto::set_m_int8(::google::protobuf::int32 value) {
  set_has_m_int8();
  m_int8_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int8)
}

// optional sint32 m_int16 = 11;
inline bool PlayerProto::has_m_int16() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerProto::set_has_m_int16() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerProto::clear_has_m_int16() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerProto::clear_m_int16() {
  m_int16_ = 0;
  clear_has_m_int16();
}
inline ::google::protobuf::int32 PlayerProto::m_int16() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int16)
  return m_int16_;
}
inline void PlayerProto::set_m_int16(::google::protobuf::int32 value) {
  set_has_m_int16();
  m_int16_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int16)
}

// optional sint32 m_int32 = 12;
inline bool PlayerProto::has_m_int32() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerProto::set_has_m_int32() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerProto::clear_has_m_int32() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerProto::clear_m_int32() {
  m_int32_ = 0;
  clear_has_m_int32();
}
inline ::google::protobuf::int32 PlayerProto::m_int32() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int32)
  return m_int32_;
}
inline void PlayerProto::set_m_int32(::google::protobuf::int32 value) {
  set_has_m_int32();
  m_int32_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int32)
}

// optional sint64 m_int64 = 13;
inline bool PlayerProto::has_m_int64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerProto::set_has_m_int64() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerProto::clear_has_m_int64() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerProto::clear_m_int64() {
  m_int64_ = GOOGLE_LONGLONG(0);
  clear_has_m_int64();
}
inline ::google::protobuf::int64 PlayerProto::m_int64() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_int64)
  return m_int64_;
}
inline void PlayerProto::set_m_int64(::google::protobuf::int64 value) {
  set_has_m_int64();
  m_int64_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_int64)
}

// optional uint32 m_uint8 = 14;
inline bool PlayerProto::has_m_uint8() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerProto::set_has_m_uint8() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerProto::clear_has_m_uint8() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerProto::clear_m_uint8() {
  m_uint8_ = 0u;
  clear_has_m_uint8();
}
inline ::google::protobuf::uint32 PlayerProto::m_uint8() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint8)
  return m_uint8_;
}
inline void PlayerProto::set_m_uint8(::google::protobuf::uint32 value) {
  set_has_m_uint8();
  m_uint8_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint8)
}

// optional uint32 m_uint16 = 15;
inline bool PlayerProto::has_m_uint16() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerProto::set_has_m_uint16() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerProto::clear_has_m_uint16() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerProto::clear_m_uint16() {
  m_uint16_ = 0u;
  clear_has_m_uint16();
}
inline ::google::protobuf::uint32 PlayerProto::m_uint16() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint16)
  return m_uint16_;
}
inline void PlayerProto::set_m_uint16(::google::protobuf::uint32 value) {
  set_has_m_uint16();
  m_uint16_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint16)
}

// optional uint32 m_uint32 = 16;
inline bool PlayerProto::has_m_uint32() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerProto::set_has_m_uint32() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerProto::clear_has_m_uint32() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerProto::clear_m_uint32() {
  m_uint32_ = 0u;
  clear_has_m_uint32();
}
inline ::google::protobuf::uint32 PlayerProto::m_uint32() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint32)
  return m_uint32_;
}
inline void PlayerProto::set_m_uint32(::google::protobuf::uint32 value) {
  set_has_m_uint32();
  m_uint32_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint32)
}

// optional uint64 m_uint64 = 17;
inline bool PlayerProto::has_m_uint64() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerProto::set_has_m_uint64() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerProto::clear_has_m_uint64() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerProto::clear_m_uint64() {
  m_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_m_uint64();
}
inline ::google::protobuf::uint64 PlayerProto::m_uint64() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_uint64)
  return m_uint64_;
}
inline void PlayerProto::set_m_uint64(::google::protobuf::uint64 value) {
  set_has_m_uint64();
  m_uint64_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_uint64)
}

// optional float m_float = 18;
inline bool PlayerProto::has_m_float() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerProto::set_has_m_float() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerProto::clear_has_m_float() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerProto::clear_m_float() {
  m_float_ = 0;
  clear_has_m_float();
}
inline float PlayerProto::m_float() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_float)
  return m_float_;
}
inline void PlayerProto::set_m_float(float value) {
  set_has_m_float();
  m_float_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_float)
}

// optional double m_double = 19;
inline bool PlayerProto::has_m_double() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerProto::set_has_m_double() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerProto::clear_has_m_double() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerProto::clear_m_double() {
  m_double_ = 0;
  clear_has_m_double();
}
inline double PlayerProto::m_double() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_double)
  return m_double_;
}
inline void PlayerProto::set_m_double(double value) {
  set_has_m_double();
  m_double_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_double)
}

// optional bool m_bool = 20;
inline bool PlayerProto::has_m_bool() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerProto::set_has_m_bool() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerProto::clear_has_m_bool() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerProto::clear_m_bool() {
  m_bool_ = false;
  clear_has_m_bool();
}
inline bool PlayerProto::m_bool() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bool)
  return m_bool_;
}
inline void PlayerProto::set_m_bool(bool value) {
  set_has_m_bool();
  m_bool_ = value;
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bool)
}

// optional bytes m_string = 21;
inline bool PlayerProto::has_m_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerProto::set_has_m_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerProto::clear_has_m_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerProto::clear_m_string() {
  m_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_string();
}
inline const ::std::string& PlayerProto::m_string() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_string)
  return m_string_.GetNoArena();
}
inline void PlayerProto::set_m_string(const ::std::string& value) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_string)
}
#if LANG_CXX11
inline void PlayerProto::set_m_string(::std::string&& value) {
  set_has_m_string();
  m_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_string)
}
#endif
inline void PlayerProto::set_m_string(const char* value) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_string)
}
inline void PlayerProto::set_m_string(const void* value, size_t size) {
  set_has_m_string();
  m_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_string)
}
inline ::std::string* PlayerProto::mutable_m_string() {
  set_has_m_string();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_string)
  return m_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_m_string() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_string)
  clear_has_m_string();
  return m_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_m_string(::std::string* m_string) {
  if (m_string != NULL) {
    set_has_m_string();
  } else {
    clear_has_m_string();
  }
  m_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_string);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_string)
}

// optional bytes m_bytes = 22;
inline bool PlayerProto::has_m_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerProto::set_has_m_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerProto::clear_has_m_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerProto::clear_m_bytes() {
  m_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes();
}
inline const ::std::string& PlayerProto::m_bytes() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes)
  return m_bytes_.GetNoArena();
}
inline void PlayerProto::set_m_bytes(const ::std::string& value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes)
}
#if LANG_CXX11
inline void PlayerProto::set_m_bytes(::std::string&& value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes)
}
#endif
inline void PlayerProto::set_m_bytes(const char* value) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes)
}
inline void PlayerProto::set_m_bytes(const void* value, size_t size) {
  set_has_m_bytes();
  m_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes)
}
inline ::std::string* PlayerProto::mutable_m_bytes() {
  set_has_m_bytes();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes)
  return m_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_m_bytes() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes)
  clear_has_m_bytes();
  return m_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_m_bytes(::std::string* m_bytes) {
  if (m_bytes != NULL) {
    set_has_m_bytes();
  } else {
    clear_has_m_bytes();
  }
  m_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes)
}

// optional bytes m_bytes_tiny = 23;
inline bool PlayerProto::has_m_bytes_tiny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerProto::set_has_m_bytes_tiny() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerProto::clear_has_m_bytes_tiny() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerProto::clear_m_bytes_tiny() {
  m_bytes_tiny_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_tiny();
}
inline const ::std::string& PlayerProto::m_bytes_tiny() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_tiny)
  return m_bytes_tiny_.GetNoArena();
}
inline void PlayerProto::set_m_bytes_tiny(const ::std::string& value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_tiny)
}
#if LANG_CXX11
inline void PlayerProto::set_m_bytes_tiny(::std::string&& value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_tiny)
}
#endif
inline void PlayerProto::set_m_bytes_tiny(const char* value) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_tiny)
}
inline void PlayerProto::set_m_bytes_tiny(const void* value, size_t size) {
  set_has_m_bytes_tiny();
  m_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_tiny)
}
inline ::std::string* PlayerProto::mutable_m_bytes_tiny() {
  set_has_m_bytes_tiny();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_tiny)
  return m_bytes_tiny_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_m_bytes_tiny() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_tiny)
  clear_has_m_bytes_tiny();
  return m_bytes_tiny_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_m_bytes_tiny(::std::string* m_bytes_tiny) {
  if (m_bytes_tiny != NULL) {
    set_has_m_bytes_tiny();
  } else {
    clear_has_m_bytes_tiny();
  }
  m_bytes_tiny_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_tiny);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_tiny)
}

// optional bytes m_bytes_medium = 24;
inline bool PlayerProto::has_m_bytes_medium() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerProto::set_has_m_bytes_medium() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerProto::clear_has_m_bytes_medium() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerProto::clear_m_bytes_medium() {
  m_bytes_medium_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_medium();
}
inline const ::std::string& PlayerProto::m_bytes_medium() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_medium)
  return m_bytes_medium_.GetNoArena();
}
inline void PlayerProto::set_m_bytes_medium(const ::std::string& value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_medium)
}
#if LANG_CXX11
inline void PlayerProto::set_m_bytes_medium(::std::string&& value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_medium)
}
#endif
inline void PlayerProto::set_m_bytes_medium(const char* value) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_medium)
}
inline void PlayerProto::set_m_bytes_medium(const void* value, size_t size) {
  set_has_m_bytes_medium();
  m_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_medium)
}
inline ::std::string* PlayerProto::mutable_m_bytes_medium() {
  set_has_m_bytes_medium();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_medium)
  return m_bytes_medium_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_m_bytes_medium() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_medium)
  clear_has_m_bytes_medium();
  return m_bytes_medium_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_m_bytes_medium(::std::string* m_bytes_medium) {
  if (m_bytes_medium != NULL) {
    set_has_m_bytes_medium();
  } else {
    clear_has_m_bytes_medium();
  }
  m_bytes_medium_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_medium);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_medium)
}

// optional bytes m_bytes_long = 25;
inline bool PlayerProto::has_m_bytes_long() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerProto::set_has_m_bytes_long() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerProto::clear_has_m_bytes_long() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerProto::clear_m_bytes_long() {
  m_bytes_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m_bytes_long();
}
inline const ::std::string& PlayerProto::m_bytes_long() const {
  // @@protoc_insertion_point(field_get:tiny.PlayerProto.m_bytes_long)
  return m_bytes_long_.GetNoArena();
}
inline void PlayerProto::set_m_bytes_long(const ::std::string& value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tiny.PlayerProto.m_bytes_long)
}
#if LANG_CXX11
inline void PlayerProto::set_m_bytes_long(::std::string&& value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tiny.PlayerProto.m_bytes_long)
}
#endif
inline void PlayerProto::set_m_bytes_long(const char* value) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tiny.PlayerProto.m_bytes_long)
}
inline void PlayerProto::set_m_bytes_long(const void* value, size_t size) {
  set_has_m_bytes_long();
  m_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tiny.PlayerProto.m_bytes_long)
}
inline ::std::string* PlayerProto::mutable_m_bytes_long() {
  set_has_m_bytes_long();
  // @@protoc_insertion_point(field_mutable:tiny.PlayerProto.m_bytes_long)
  return m_bytes_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_m_bytes_long() {
  // @@protoc_insertion_point(field_release:tiny.PlayerProto.m_bytes_long)
  clear_has_m_bytes_long();
  return m_bytes_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_m_bytes_long(::std::string* m_bytes_long) {
  if (m_bytes_long != NULL) {
    set_has_m_bytes_long();
  } else {
    clear_has_m_bytes_long();
  }
  m_bytes_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m_bytes_long);
  // @@protoc_insertion_point(field_set_allocated:tiny.PlayerProto.m_bytes_long)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tiny

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tinyplayer_2eproto__INCLUDED
