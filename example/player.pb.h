// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PlayerProto;
class PlayerProtoDefaultTypeInternal;
extern PlayerProtoDefaultTypeInternal _PlayerProto_default_instance_;
class PlayerProto4Table;
class PlayerProto4TableDefaultTypeInternal;
extern PlayerProto4TableDefaultTypeInternal _PlayerProto4Table_default_instance_;
class WeaponProto;
class WeaponProtoDefaultTypeInternal;
extern WeaponProtoDefaultTypeInternal _WeaponProto_default_instance_;

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_player_2eproto

// ===================================================================

class WeaponProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WeaponProto) */ {
 public:
  WeaponProto();
  virtual ~WeaponProto();

  WeaponProto(const WeaponProto& from);

  inline WeaponProto& operator=(const WeaponProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeaponProto& default_instance();

  static inline const WeaponProto* internal_default_instance() {
    return reinterpret_cast<const WeaponProto*>(
               &_WeaponProto_default_instance_);
  }

  void Swap(WeaponProto* other);

  // implements Message ----------------------------------------------

  inline WeaponProto* New() const PROTOBUF_FINAL { return New(NULL); }

  WeaponProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeaponProto& from);
  void MergeFrom(const WeaponProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeaponProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:WeaponProto)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  friend struct  protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerProto) */ {
 public:
  PlayerProto();
  virtual ~PlayerProto();

  PlayerProto(const PlayerProto& from);

  inline PlayerProto& operator=(const PlayerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerProto& default_instance();

  static inline const PlayerProto* internal_default_instance() {
    return reinterpret_cast<const PlayerProto*>(
               &_PlayerProto_default_instance_);
  }

  void Swap(PlayerProto* other);

  // implements Message ----------------------------------------------

  inline PlayerProto* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerProto& from);
  void MergeFrom(const PlayerProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 quests = 3;
  int quests_size() const;
  void clear_quests();
  static const int kQuestsFieldNumber = 3;
  ::google::protobuf::uint32 quests(int index) const;
  void set_quests(int index, ::google::protobuf::uint32 value);
  void add_quests(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      quests() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_quests();

  // repeated .WeaponProto weapons = 5;
  int weapons_size() const;
  void clear_weapons();
  static const int kWeaponsFieldNumber = 5;
  const ::WeaponProto& weapons(int index) const;
  ::WeaponProto* mutable_weapons(int index);
  ::WeaponProto* add_weapons();
  ::google::protobuf::RepeatedPtrField< ::WeaponProto >*
      mutable_weapons();
  const ::google::protobuf::RepeatedPtrField< ::WeaponProto >&
      weapons() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes weapons_map = 6;
  bool has_weapons_map() const;
  void clear_weapons_map();
  static const int kWeaponsMapFieldNumber = 6;
  const ::std::string& weapons_map() const;
  void set_weapons_map(const ::std::string& value);
  #if LANG_CXX11
  void set_weapons_map(::std::string&& value);
  #endif
  void set_weapons_map(const char* value);
  void set_weapons_map(const void* value, size_t size);
  ::std::string* mutable_weapons_map();
  ::std::string* release_weapons_map();
  void set_allocated_weapons_map(::std::string* weapons_map);

  // optional .WeaponProto weapon = 4;
  bool has_weapon() const;
  void clear_weapon();
  static const int kWeaponFieldNumber = 4;
  const ::WeaponProto& weapon() const;
  ::WeaponProto* mutable_weapon();
  ::WeaponProto* release_weapon();
  void set_allocated_weapon(::WeaponProto* weapon);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerProto)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_weapon();
  void clear_has_weapon();
  void set_has_weapons_map();
  void clear_has_weapons_map();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > quests_;
  ::google::protobuf::RepeatedPtrField< ::WeaponProto > weapons_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr weapons_map_;
  ::WeaponProto* weapon_;
  ::google::protobuf::uint32 id_;
  friend struct  protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerProto4Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerProto4Table) */ {
 public:
  PlayerProto4Table();
  virtual ~PlayerProto4Table();

  PlayerProto4Table(const PlayerProto4Table& from);

  inline PlayerProto4Table& operator=(const PlayerProto4Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerProto4Table& default_instance();

  static inline const PlayerProto4Table* internal_default_instance() {
    return reinterpret_cast<const PlayerProto4Table*>(
               &_PlayerProto4Table_default_instance_);
  }

  void Swap(PlayerProto4Table* other);

  // implements Message ----------------------------------------------

  inline PlayerProto4Table* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerProto4Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerProto4Table& from);
  void MergeFrom(const PlayerProto4Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerProto4Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes weaon = 4;
  bool has_weaon() const;
  void clear_weaon();
  static const int kWeaonFieldNumber = 4;
  const ::std::string& weaon() const;
  void set_weaon(const ::std::string& value);
  #if LANG_CXX11
  void set_weaon(::std::string&& value);
  #endif
  void set_weaon(const char* value);
  void set_weaon(const void* value, size_t size);
  ::std::string* mutable_weaon();
  ::std::string* release_weaon();
  void set_allocated_weaon(::std::string* weaon);

  // optional bytes weapns = 5;
  bool has_weapns() const;
  void clear_weapns();
  static const int kWeapnsFieldNumber = 5;
  const ::std::string& weapns() const;
  void set_weapns(const ::std::string& value);
  #if LANG_CXX11
  void set_weapns(::std::string&& value);
  #endif
  void set_weapns(const char* value);
  void set_weapns(const void* value, size_t size);
  ::std::string* mutable_weapns();
  ::std::string* release_weapns();
  void set_allocated_weapns(::std::string* weapns);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 age = 3;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::uint32 age() const;
  void set_age(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerProto4Table)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_age();
  void clear_has_age();
  void set_has_weaon();
  void clear_has_weaon();
  void set_has_weapns();
  void clear_has_weapns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr weaon_;
  ::google::protobuf::internal::ArenaStringPtr weapns_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 age_;
  friend struct  protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WeaponProto

// optional uint32 type = 1;
inline bool WeaponProto::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponProto::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponProto::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 WeaponProto::type() const {
  // @@protoc_insertion_point(field_get:WeaponProto.type)
  return type_;
}
inline void WeaponProto::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:WeaponProto.type)
}

// optional string name = 2;
inline bool WeaponProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& WeaponProto::name() const {
  // @@protoc_insertion_point(field_get:WeaponProto.name)
  return name_.GetNoArena();
}
inline void WeaponProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WeaponProto.name)
}
#if LANG_CXX11
inline void WeaponProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WeaponProto.name)
}
#endif
inline void WeaponProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WeaponProto.name)
}
inline void WeaponProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WeaponProto.name)
}
inline ::std::string* WeaponProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:WeaponProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeaponProto::release_name() {
  // @@protoc_insertion_point(field_release:WeaponProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeaponProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:WeaponProto.name)
}

// -------------------------------------------------------------------

// PlayerProto

// optional uint32 id = 1;
inline bool PlayerProto::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerProto::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerProto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PlayerProto::id() const {
  // @@protoc_insertion_point(field_get:PlayerProto.id)
  return id_;
}
inline void PlayerProto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerProto.id)
}

// optional string name = 2;
inline bool PlayerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlayerProto::name() const {
  // @@protoc_insertion_point(field_get:PlayerProto.name)
  return name_.GetNoArena();
}
inline void PlayerProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto.name)
}
#if LANG_CXX11
inline void PlayerProto::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto.name)
}
#endif
inline void PlayerProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto.name)
}
inline void PlayerProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto.name)
}
inline ::std::string* PlayerProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlayerProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_name() {
  // @@protoc_insertion_point(field_release:PlayerProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.name)
}

// repeated uint32 quests = 3;
inline int PlayerProto::quests_size() const {
  return quests_.size();
}
inline void PlayerProto::clear_quests() {
  quests_.Clear();
}
inline ::google::protobuf::uint32 PlayerProto::quests(int index) const {
  // @@protoc_insertion_point(field_get:PlayerProto.quests)
  return quests_.Get(index);
}
inline void PlayerProto::set_quests(int index, ::google::protobuf::uint32 value) {
  quests_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerProto.quests)
}
inline void PlayerProto::add_quests(::google::protobuf::uint32 value) {
  quests_.Add(value);
  // @@protoc_insertion_point(field_add:PlayerProto.quests)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerProto::quests() const {
  // @@protoc_insertion_point(field_list:PlayerProto.quests)
  return quests_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerProto::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:PlayerProto.quests)
  return &quests_;
}

// optional .WeaponProto weapon = 4;
inline bool PlayerProto::has_weapon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerProto::set_has_weapon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerProto::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerProto::clear_weapon() {
  if (weapon_ != NULL) weapon_->::WeaponProto::Clear();
  clear_has_weapon();
}
inline const ::WeaponProto& PlayerProto::weapon() const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapon)
  return weapon_ != NULL ? *weapon_
                         : *::WeaponProto::internal_default_instance();
}
inline ::WeaponProto* PlayerProto::mutable_weapon() {
  set_has_weapon();
  if (weapon_ == NULL) {
    weapon_ = new ::WeaponProto;
  }
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapon)
  return weapon_;
}
inline ::WeaponProto* PlayerProto::release_weapon() {
  // @@protoc_insertion_point(field_release:PlayerProto.weapon)
  clear_has_weapon();
  ::WeaponProto* temp = weapon_;
  weapon_ = NULL;
  return temp;
}
inline void PlayerProto::set_allocated_weapon(::WeaponProto* weapon) {
  delete weapon_;
  weapon_ = weapon;
  if (weapon) {
    set_has_weapon();
  } else {
    clear_has_weapon();
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.weapon)
}

// repeated .WeaponProto weapons = 5;
inline int PlayerProto::weapons_size() const {
  return weapons_.size();
}
inline void PlayerProto::clear_weapons() {
  weapons_.Clear();
}
inline const ::WeaponProto& PlayerProto::weapons(int index) const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapons)
  return weapons_.Get(index);
}
inline ::WeaponProto* PlayerProto::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapons)
  return weapons_.Mutable(index);
}
inline ::WeaponProto* PlayerProto::add_weapons() {
  // @@protoc_insertion_point(field_add:PlayerProto.weapons)
  return weapons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WeaponProto >*
PlayerProto::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:PlayerProto.weapons)
  return &weapons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WeaponProto >&
PlayerProto::weapons() const {
  // @@protoc_insertion_point(field_list:PlayerProto.weapons)
  return weapons_;
}

// optional bytes weapons_map = 6;
inline bool PlayerProto::has_weapons_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerProto::set_has_weapons_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerProto::clear_has_weapons_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerProto::clear_weapons_map() {
  weapons_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapons_map();
}
inline const ::std::string& PlayerProto::weapons_map() const {
  // @@protoc_insertion_point(field_get:PlayerProto.weapons_map)
  return weapons_map_.GetNoArena();
}
inline void PlayerProto::set_weapons_map(const ::std::string& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto.weapons_map)
}
#if LANG_CXX11
inline void PlayerProto::set_weapons_map(::std::string&& value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto.weapons_map)
}
#endif
inline void PlayerProto::set_weapons_map(const char* value) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto.weapons_map)
}
inline void PlayerProto::set_weapons_map(const void* value, size_t size) {
  set_has_weapons_map();
  weapons_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto.weapons_map)
}
inline ::std::string* PlayerProto::mutable_weapons_map() {
  set_has_weapons_map();
  // @@protoc_insertion_point(field_mutable:PlayerProto.weapons_map)
  return weapons_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto::release_weapons_map() {
  // @@protoc_insertion_point(field_release:PlayerProto.weapons_map)
  clear_has_weapons_map();
  return weapons_map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto::set_allocated_weapons_map(::std::string* weapons_map) {
  if (weapons_map != NULL) {
    set_has_weapons_map();
  } else {
    clear_has_weapons_map();
  }
  weapons_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapons_map);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto.weapons_map)
}

// -------------------------------------------------------------------

// PlayerProto4Table

// optional uint32 id = 1;
inline bool PlayerProto4Table::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerProto4Table::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerProto4Table::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerProto4Table::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PlayerProto4Table::id() const {
  // @@protoc_insertion_point(field_get:PlayerProto4Table.id)
  return id_;
}
inline void PlayerProto4Table::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PlayerProto4Table.id)
}

// optional bytes name = 2;
inline bool PlayerProto4Table::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerProto4Table::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerProto4Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerProto4Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PlayerProto4Table::name() const {
  // @@protoc_insertion_point(field_get:PlayerProto4Table.name)
  return name_.GetNoArena();
}
inline void PlayerProto4Table::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto4Table.name)
}
#if LANG_CXX11
inline void PlayerProto4Table::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto4Table.name)
}
#endif
inline void PlayerProto4Table::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto4Table.name)
}
inline void PlayerProto4Table::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto4Table.name)
}
inline ::std::string* PlayerProto4Table::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:PlayerProto4Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto4Table::release_name() {
  // @@protoc_insertion_point(field_release:PlayerProto4Table.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto4Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto4Table.name)
}

// optional uint32 age = 3;
inline bool PlayerProto4Table::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerProto4Table::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerProto4Table::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerProto4Table::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 PlayerProto4Table::age() const {
  // @@protoc_insertion_point(field_get:PlayerProto4Table.age)
  return age_;
}
inline void PlayerProto4Table::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:PlayerProto4Table.age)
}

// optional bytes weaon = 4;
inline bool PlayerProto4Table::has_weaon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerProto4Table::set_has_weaon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerProto4Table::clear_has_weaon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerProto4Table::clear_weaon() {
  weaon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weaon();
}
inline const ::std::string& PlayerProto4Table::weaon() const {
  // @@protoc_insertion_point(field_get:PlayerProto4Table.weaon)
  return weaon_.GetNoArena();
}
inline void PlayerProto4Table::set_weaon(const ::std::string& value) {
  set_has_weaon();
  weaon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto4Table.weaon)
}
#if LANG_CXX11
inline void PlayerProto4Table::set_weaon(::std::string&& value) {
  set_has_weaon();
  weaon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto4Table.weaon)
}
#endif
inline void PlayerProto4Table::set_weaon(const char* value) {
  set_has_weaon();
  weaon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto4Table.weaon)
}
inline void PlayerProto4Table::set_weaon(const void* value, size_t size) {
  set_has_weaon();
  weaon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto4Table.weaon)
}
inline ::std::string* PlayerProto4Table::mutable_weaon() {
  set_has_weaon();
  // @@protoc_insertion_point(field_mutable:PlayerProto4Table.weaon)
  return weaon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto4Table::release_weaon() {
  // @@protoc_insertion_point(field_release:PlayerProto4Table.weaon)
  clear_has_weaon();
  return weaon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto4Table::set_allocated_weaon(::std::string* weaon) {
  if (weaon != NULL) {
    set_has_weaon();
  } else {
    clear_has_weaon();
  }
  weaon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weaon);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto4Table.weaon)
}

// optional bytes weapns = 5;
inline bool PlayerProto4Table::has_weapns() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerProto4Table::set_has_weapns() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerProto4Table::clear_has_weapns() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerProto4Table::clear_weapns() {
  weapns_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weapns();
}
inline const ::std::string& PlayerProto4Table::weapns() const {
  // @@protoc_insertion_point(field_get:PlayerProto4Table.weapns)
  return weapns_.GetNoArena();
}
inline void PlayerProto4Table::set_weapns(const ::std::string& value) {
  set_has_weapns();
  weapns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerProto4Table.weapns)
}
#if LANG_CXX11
inline void PlayerProto4Table::set_weapns(::std::string&& value) {
  set_has_weapns();
  weapns_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerProto4Table.weapns)
}
#endif
inline void PlayerProto4Table::set_weapns(const char* value) {
  set_has_weapns();
  weapns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerProto4Table.weapns)
}
inline void PlayerProto4Table::set_weapns(const void* value, size_t size) {
  set_has_weapns();
  weapns_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerProto4Table.weapns)
}
inline ::std::string* PlayerProto4Table::mutable_weapns() {
  set_has_weapns();
  // @@protoc_insertion_point(field_mutable:PlayerProto4Table.weapns)
  return weapns_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProto4Table::release_weapns() {
  // @@protoc_insertion_point(field_release:PlayerProto4Table.weapns)
  clear_has_weapns();
  return weapns_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProto4Table::set_allocated_weapns(::std::string* weapns) {
  if (weapns != NULL) {
    set_has_weapns();
  } else {
    clear_has_weapns();
  }
  weapns_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weapns);
  // @@protoc_insertion_point(field_set_allocated:PlayerProto4Table.weapns)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
